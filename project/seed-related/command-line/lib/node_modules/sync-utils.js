var config = require('common/config.js')
var utils = require('common/utils.js')

var fs = require('fs')
var del = require('delete')
var cp = require('copy-dir')

var processExceptions = function (base, rawExceptions) {
    return rawExceptions.map(function (rawException) {
        return utils.punix(base + '/' + rawException) + '/';
    })
}

/**
 * 在 exceptions 中比较一个路径,
 * 如果路径是任何exception的父级文件夹, 则需要对这个路径做子文件(夹) 的处理
 * 如果路径等于某一个exception, 说明完全不用处理该路径
 *
 * @param path
 * @param exceptions
 * @returns {{shouldSkip: boolean, shouldProcessChildren: boolean}}
 */
var checkPathException = function (path, exceptions) {
    var formalisedPath = utils.punix(path) + '/';

    var shouldSkip = false;
    var shouldProcessChildren = exceptions.some(function (exception) {
        var hit = exception.substr(0, formalisedPath.length) == formalisedPath
        if (hit) {
            if (exception == formalisedPath) {
                shouldSkip = true;
            }
        }
        return hit;
    })

    return {
        shouldSkip: shouldSkip,
        shouldProcessChildren: shouldProcessChildren
    }
}

/**
 * 跟source比较, 将target里多出的东西给删除掉
 *
 * @param target
 * @param source
 * @param exceptions
 */
var removeNonExists = function (target, source, exceptions) {
    var checkResult = checkPathException(target, exceptions)
    var shouldProcessChildren = checkResult.shouldProcessChildren
    var shouldSkip = checkResult.shouldSkip

    if (shouldSkip) {
        console.log('>>>>>> Skipped path: ', source);
        return;
    }

    if (!fs.existsSync(source)) {
        console.log('Path not found on Source, removed: ', target)
        del.sync(target)
    } else {
        console.log('Path exists on Source: ', target)
        stat = fs.statSync(target)

        // 如果是文件夹, 则继续往下找
        if (stat.isDirectory()) {
            var subItems = fs.readdirSync(target)
            subItems.forEach(function (subItem) {
                removeNonExists(
                    utils.p(target + '/' + subItem),
                    utils.p(source + '/' + subItem),
                    exceptions
                )
            })
        } else {
            if (!fs.existsSync(source)) {
                console.log('Path not found on Source, removed: ', target)
                del.sync(target)
            }
        }
    }
}

/**
 * 目前的逻辑还没考虑 project 项目的清理 (即删掉在 seed 中没有的)
 * @param source
 * @param target
 * @param exceptions
 */
var update = function (target, source, exceptions) {
    var checkResult = checkPathException(target, exceptions)
    var shouldProcessChildren = checkResult.shouldProcessChildren
    var shouldSkip = checkResult.shouldSkip

    if (shouldSkip) {
        console.log('>>>>>> Skipped path: ', source);
        return;
    }

    if (shouldProcessChildren) {
        console.log('>>> Carefully processing: ', source)

        var stat = fs.statSync(target)
        // 如果是文件夹, 则继续往下找
        if (stat.isDirectory()) {
            var subItems = fs.readdirSync(source)
            subItems.forEach(function (subItem) {
                update(
                    utils.p(target + '/' + subItem),
                    utils.p(source + '/' + subItem),
                    exceptions
                )
            })
        }
    } else {
        console.log('Syncing: ', source)
        cp.sync(source, target)
    }
}

module.exports = {
    sync: function (target, source, opts) {
        var seedPromise;
        
        if (opts.seedVersion || opts.dev) {
            seedPromise = require('../seed.js')(opts)
        } else {
            // 如果没有 seed path, 先尝试 clone 一个
            seedPromise = require('../seed.js')({})
        }

        var seedOpts = require(config.projectPath + '/seed-related/seed-project.js')

        // console.log('@debug;', seedOpts)

        var exceptions = processExceptions(target, seedOpts.locals)
        // console.log('@debug;', exceptions)

        // if (seedPromise) {
        seedPromise
            .catch(function(e) {
                console.log(e)
            })
            .then(function () {
                console.log('======= Start removing non-existings =======')
                removeNonExists(target, source, exceptions)
                console.log('======= Start copying from source =======')
                update(target, source, exceptions)
            })
        // } else {
        //     console.log('======= Start removing non-existings =======')
        //     removeNonExists(target, source, exceptions)
        //     console.log('======= Start copying from source =======')
        //     update(target, source, exceptions)
        // }

    }
}