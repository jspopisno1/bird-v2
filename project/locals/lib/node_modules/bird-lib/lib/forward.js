var url = require('url')

var http = require('http-debug').http;
var https = require('http-debug').https;

module.exports = function (config, hitRouteInfo, server, req, res, next) {
    var serverBase = server.server
    var headers = req.headers

    // 需要将 headers 的 host 改好, 否则一些server会傻X
    var serverBaseUrlInfo = url.parse(serverBase)
    var serverPort = serverBaseUrlInfo.port
    headers.host = serverBaseUrlInfo.hostname + (serverPort ? ':' + serverBaseUrlInfo.port : '')
    delete headers['x-requested-with'];

    var urlOptions = {
        host: serverBaseUrlInfo.hostname,
        port: serverBaseUrlInfo.port,
        path: hitRouteInfo.adjustedPathname + '?' + url.parse(req.url).query,
        method: req.method,
        headers: headers,
        rejectUnauthorized: false
    }

    var forwardUrl = serverBase + '/' + hitRouteInfo.adjustedPathname
    console.info('fowarding', hitRouteInfo.pathname.red, 'to', forwardUrl.cyan);

    var forwardPlugin
    server.plugin = server.plugin || 'default'
    if (typeof server.plugin == 'string') {
        forwardPlugin = require('../forward-plugins/' + server.plugin)
    } else if (typeof server.plugin == 'function') {
        forwardPlugin = server.plugin
    }

    forwardPlugin(server, urlOptions)

    var httpOrHttps = serverBaseUrlInfo.protocol === 'http:' ? http : https;

    // 转发功能的核心, 通过模拟请求发送, 转接所有处理后的请求数据给target server, 并将随后得到的所有信息原样返回给前端
    var forwardRequest = httpOrHttps.request(urlOptions, function (forwardResponse) {
        // set headers to the headers in origin request
        res.writeHead(forwardResponse.statusCode, forwardResponse.headers);

        forwardResponse.on('data', function (chunk) {
            // body += chunk;
            res.write(chunk);
        });

        forwardResponse.on('end', function () {
            // console.info(body)
            res.end();
        });
    });

    forwardRequest.on('error', function (e) {
        console.error('problem with request: ' + e.message);
        res.end()
    });

    req.addListener('data', function (chunk) {
        forwardRequest.write(chunk);
    });

    req.addListener('end', function () {
        forwardRequest.end();
    });

}