var url = require('url')

var http = require('http-debug').http;
var https = require('http-debug').https;

var birdUtils = require('bird-common/utils')

var forward = function(config, httpOrHttps, urlOptions, req, res, callback) {
    // 转发功能的核心, 通过模拟请求发送, 转接所有处理后的请求数据给target server, 并将随后得到的所有信息原样返回给前端
    var forwardRequest = httpOrHttps.request(urlOptions, function (forwardResponse) {

        var statusCode = forwardResponse.statusCode;

        // 如果返回不为 200, 则需要进行 <<[ 特殊返回的处理, 如 3XX, 403 ]{t97zs_w0fege8q_iomeynf7}>>
        if (statusCode != 200) {
            //console.log('@debug, ', forwardResponse.location, statusCode)

            birdUtils.log('warn', 'Response status got is : ' + statusCode)

            // 如果是站内redirect, 我们需要把 location 给更换 host 了,
            // 暂不支持 protocol 自动切换
            var location = forwardResponse.headers.location
            var newLocationParsed = false
            if (typeof location == 'string') {
                var newLocationInfo = url.parse(location)
                if (newLocationInfo.host == urlOptions.host && newLocationInfo.port == urlOptions.port) {
                    newLocationParsed = true
                    forwardResponse.headers.location =
                        'http://localhost:' + config.bird_port + newLocationInfo.pathname + (newLocationInfo.query ? '?' + newLocationInfo.query : '')
                }
            }

            if (!newLocationParsed && (statusCode >= 300 && statusCode < 400) || statusCode == 403 || statusCode == 401 || statusCode == 407) {
                res.send('<h1>[MESSAGE from bird] Please refresh your browser...</h1> ' +
                '<h4>You probably need to make sure the cookie is valid for your login, e.g. copy&paste the cookie from your browser and replace it on your bird config.</h4>')
                res.end()
                birdUtils.logs(
                    ['debug', 'Need retry authentication'],
                    ['hint', 'You probably need to make sure the cookie is valid for your login, e.g. copy&paste the cookie from your browser and replace it on your bird config.']
                )
                return callback(true)
            }
            //console.log('@debug, ', forwardResponse.headers.location)
        }
        res.writeHead(statusCode, forwardResponse.headers);

        forwardResponse.on('data', function (chunk) {
            // body += chunk;
            res.write(chunk);
        });

        forwardResponse.on('end', function () {
            // console.info(body)
            res.end();
            callback(false)
        });
    });

    forwardRequest.on('error', function (e) {
        console.error('problem with request: ' + e.message);
        res.end()
        callback(false)
    });

    req.addListener('data', function (chunk) {
        forwardRequest.write(chunk);
    });

    req.addListener('end', function () {
        forwardRequest.end();
    });
}

module.exports = function (config, hitRouteInfo, server, req, res, next) {
    var serverBase = server.server
    var headers = req.headers

    // 需要将 headers 的 host 改好, 否则一些server会傻X
    var serverBaseUrlInfo = url.parse(serverBase)
    var serverPort = serverBaseUrlInfo.port
    headers.host = serverBaseUrlInfo.hostname + (serverPort ? ':' + serverBaseUrlInfo.port : '')
    delete headers['x-requested-with'];

    var queryStr = url.parse(req.url).query;
    var urlOptions = {
        host: serverBaseUrlInfo.hostname,
        port: serverBaseUrlInfo.port,
        path: hitRouteInfo.adjustedPathname + (queryStr ? '?' + url.parse(req.url).query : ''),
        method: req.method,
        headers: headers,
        rejectUnauthorized: false
    }

    var forwardUrl = serverBase + '/' + hitRouteInfo.adjustedPathname
    console.info('fowarding', hitRouteInfo.pathname.red, 'to', forwardUrl.cyan);

    // <<[ 解析所用的 plugin, 并调用它 ]{t97zs_vd7sdnis_iomf0g31}>>
    var forwardPlugin
    server.plugin = server.plugin || 'default'
    if (typeof server.plugin == 'string') {
        forwardPlugin = require('../forward-plugins/' + server.plugin)
    } else if (typeof server.plugin == 'function') {
        forwardPlugin = server.plugin
    }

    forwardPlugin(false, server, urlOptions)

    var httpOrHttps = serverBaseUrlInfo.protocol === 'http:' ? http : https;

    // 如果需要 retry, 很可能是由于我们需要再次的做用户认证
    forward(config, httpOrHttps, urlOptions, req, res, function(needRetry) {
        if (needRetry && server.retry) {
            birdUtils.log('warn', 'Probably need authentication, so let\'s retry the (auth) plugin.')
            forwardPlugin(true, server, urlOptions)
        }
    })
}